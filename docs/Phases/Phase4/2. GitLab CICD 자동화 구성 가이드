# GitLab CI/CD 자동화 구성 가이드

GitLab CI/CD를 이용해 Terraform과 Ansible을 자동화하는 방법을 설명함

---

## 목표
GitLab CI/CD를 이용해 다음 작업을 자동화
- Terraform을 통한 OpenStack 인프라 구성
- Ansible을 통한 서비스 설정 자동화 (Jenkins, Nginx 등)

---

## .gitlab-ci.yml이란?

`.gitlab-ci.yml`은 GitLab에서 **CI/CD 파이프라인을 정의하는 설정 파일**임. 이 파일은 GitLab이 코드를 커밋/푸시할 때 자동으로 실행할 **빌드, 테스트, 배포 작업**을 명시함.

즉, **Terraform 실행 → Ansible 구성 → 완료 알림** 같은 작업 흐름을 이 파일 하나로 정의할 수 있음.

### 주요 특징
- GitLab 프로젝트 루트 디렉토리에 위치해야 함
- YAML 형식으로 작성
- `stages`, `jobs`, `script` 등의 키워드로 단계 정의
- GitLab Runner가 이를 읽고 작업 수행

## 사전 준비 사항

1. GitLab 서버 및 프로젝트 생성 완료
2. GitLab Runner 등록 및 작동 중
3. `terraform/`, `ansible/` 디렉토리에 코드 정리 완료
4. `clouds.yaml` 파일로 OpenStack 인증 구성 완료 (또는 환경 변수 설정)
5. GitLab 리포지토리에 `.gitlab-ci.yml` 추가할 준비 완료

## 디렉토리 구조

```
/
├── .gitlab-ci.yml     # GitLab 파이프라인 정의 파일
├── terraform/         # Terraform 코드 디렉토리
│   └── main.tf 등
├── ansible/           # Ansible 플레이북 디렉토리
│   └── playbook.yml 등
└── clouds.yaml        # OpenStack 인증 파일 (Runner에 존재해야 함)
```

## .gitlab-ci.yml 기본 구조

```yaml
stages:
  - terraform
  - ansible

variables:
  TF_IN_AUTOMATION: "true"
  OS_CLOUD: "mycloud"  # clouds.yaml에 정의된 클라우드 이름

before_script:
  - apt-get update && apt-get install -y curl unzip python3-pip
  - pip3 install openstacksdk
  - curl -fsSL https://releases.hashicorp.com/terraform/1.6.6/terraform_1.6.6_linux_amd64.zip -o terraform.zip
  - unzip terraform.zip && mv terraform /usr/local/bin/ && terraform -version

terraform:
  stage: terraform
  script:
    - cd terraform
    - terraform init
    - terraform plan
    - terraform apply -auto-approve
  only:
    - main
```

## 실행 흐름

1. **코드 푸시**: 사용자가 GitLab의 `main` 브랜치에 코드를 푸시
2. **파이프라인 실행**: `.gitlab-ci.yml`이 정의한 대로 GitLab CI/CD 파이프라인이 실행됨
3. **인프라 생성**: `terraform/` 디렉토리에서 `init`, `plan`, `apply`를 수행하여 OpenStack 인프라 생성
4. **다음 단계**: Ansible job이 실행될 준비 완료

## 파이프라인 실행 확인

### GitLab 웹 인터페이스에서 확인
1. GitLab 프로젝트 페이지 접속
2. 좌측 메뉴에서 **CI/CD > Pipelines** 클릭
3. 실행 중인 파이프라인 상태 확인

### 파이프라인 로그 확인
1. 실행 중인 파이프라인 클릭
2. 각 job 클릭하여 상세 로그 확인
3. 에러 발생시 로그에서 원인 파악

## 문제 해결

### GitLab Runner 상태 확인
```bash
# Runner 상태 확인
sudo gitlab-runner status

# Runner 재시작
sudo gitlab-runner restart
```

### OpenStack 인증 문제
```bash
# clouds.yaml 파일 확인
cat ~/.config/openstack/clouds.yaml

# OpenStack 연결 테스트
openstack server list
```

### Terraform 상태 확인
```bash
# Terraform 상태 파일 확인
cd terraform
terraform show
```

## 추가 설정 (선택사항)

### Ansible 단계 추가
```yaml
ansible:
  stage: ansible
  script:
    - cd ansible
    - ansible-playbook -i inventory.ini playbook.yml
  only:
    - main
  dependencies:
    - terraform
```

### 알림 설정
```yaml
notify:
  stage: notify
  script:
    - echo "배포가 완료되었습니다"
  only:
    - main
  when: on_success
```

**참고**: `.gitlab-ci.yml` 파일은 프로젝트 루트에 위치해야 하며, 문법 오류가 있으면 파이프라인이 실행되지 않음
