# Phase 6-1: 트래픽 생성 및 장애 주입 실습

본 문서는 Jenkins가 설치된 OpenStack 인스턴스에서 ApacheBench를 사용하여 부하를 발생시키고, Nginx 서비스에 장애를 주입 및 복구하는 과정을 다룬다.

## 환경 요구사항

- Jenkins와 Nginx가 동일 인스턴스에 설치됨
- Prometheus, Grafana, Alertmanager 설치 완료됨
- 필요 시 127.0.0.1 또는 Floating IP 사용함

## 환경 변수 설정

- **Floating IP**: `http://<YOUR_FLOATING_IP>/`
- **Jenkins**: `http://<YOUR_FLOATING_IP>:8080/`

## 사전 준비사항 체크리스트

다음 항목들을 확인한다:

- Jenkins 웹 UI/SSH 접속 가능 여부 확인
- 대상 OpenStack VM의 Floating IP 확인
- Node Exporter가 Prometheus에 정상적으로 스크레이프되는지 확인
- Grafana 대시보드 정상 작동 확인
- Nginx 기본 페이지 정상 응답 확인 (`curl -I http://127.0.0.1/`)

## 1단계: 부하 테스트 도구 설치

Jenkins 인스턴스 내부에서 다음 명령을 실행한다:

```bash
sudo apt-get update
sudo apt-get install -y apache2-utils
ab -V   # 설치 확인
```

**주의사항**: Host VM(DevStack 하이퍼바이저)에는 설치하지 않는다. 모든 작업은 Jenkins 인스턴스에서 실행한다.

## 2단계: Jenkins Job 생성

### Job 생성 과정

1. Jenkins 접속 후 **New Item** 클릭
2. **Freestyle project** 선택
3. 프로젝트 이름: **load-test**
4. **This project is parameterized** 체크박스 선택

### 파라미터 설정

다음 String Parameter들을 추가한다:

| 파라미터명 | 기본값 | 설명 |
|-----------|--------|------|
| `TARGET_URL` | `http://<YOUR_FLOATING_IP>/` | 부하 테스트 대상 URL |
| `TOTAL` | `1000` | 총 요청 수 |
| `CONCURRENCY` | `10` | 동시 연결 수 |

### Build Steps 설정

**Build Steps → Execute shell**에 다음 스크립트를 입력한다:

```bash
# keep-alive로 연결 재사용 (권장)
ab -k -n ${TOTAL} -c ${CONCURRENCY} ${TARGET_URL}
```

설정 완료 후 **Save**를 클릭한다.

### 부하 테스트 권장 순서

점진적으로 부하를 증가시키는 것을 권장한다:

1. 초기 테스트: TOTAL 1,000 / CONCURRENCY 10
2. 중간 부하: TOTAL 10,000 / CONCURRENCY 50
3. 고부하 테스트: TOTAL 50,000 / CONCURRENCY 200

## 3단계: Job 실행 및 결과 확인

### 실행 방법

1. **Build with Parameters** 클릭
2. 원하는 파라미터 입력
3. **Build** 클릭

### 결과 확인

**Console Output**에서 다음 지표들을 확인하고 기록한다:

```
Concurrency Level:      10
Complete requests:      1000
Failed requests:        0
Requests per second:    1,234.56 [#/sec] (mean)
Time per request:       8.10 [ms] (mean)
```

주요 지표:
- `Requests per second`: 초당 처리된 요청 수
- `Failed requests`: 실패한 요청 수
- `Time per request (mean)`: 평균 응답 시간

## 4단계: 장애 주입 시나리오

다음 명령들은 Nginx가 설치된 동일 인스턴스에서 실행한다.

### 시나리오 A: 서비스 다운

```bash
sudo systemctl stop nginx
```

### 시나리오 B: 포트 차단 (HTTP 80)

```bash
sudo iptables -I INPUT -p tcp --dport 80 -j DROP
```

### 시나리오 C: CPU 스파이크 (60초 동안)

```bash
timeout 60 bash -c 'while :; do :; done' &
```

## 5단계: 장애 복구

### Nginx 서비스 복구

```bash
sudo systemctl start nginx
```

### iptables 규칙 제거

```bash
sudo iptables -D INPUT -p tcp --dport 80 -j DROP
```

## 6단계: Grafana/Prometheus 모니터링 확인

다음과 같은 변화를 Grafana 대시보드에서 확인할 수 있다:

- **CPU 부하**: CPU Basic 그래프에서 Busy User/System 급상승
- **서비스 다운/포트 차단**: Network Traffic 패턴 변화
- **네트워크 트래픽**: 부하 테스트 실행 시 스파이크 발생 후 안정화

Jenkins 실행 직후 CPU 및 네트워크 스파이크가 발생한 후 안정화되는 패턴을 관찰할 수 있다.

## 트러블슈팅

### 일반적인 문제 및 해결방법

**`ab: command not found` 오류**
- `apache2-utils` 패키지 재설치를 확인한다

**`Failed requests` 급증**
- `-k` (keep-alive) 옵션을 사용한다
- `CONCURRENCY` 값을 한 단계 낮춘다
- 워밍업을 위해 1회 실행한 후 본격적인 테스트를 진행한다

**Jenkins 성능 저하**
- 동일 인스턴스에서 부하 생성과 서비스가 동시 실행되어 발생함
- 파라미터 값 축소 또는 부하 생성기와 대상 서비스 분리를 권장한다

**Nginx 응답 없음**
- iptables DROP 규칙 제거를 확인한다
- nginx 상태를 확인한다: `systemctl status nginx`

## 문서화용 산출물 체크리스트

다음 항목들을 캡처하여 문서화한다:

- Jenkins Job 설정 화면 (Parameters, Build Steps)
- 첫 실행 콘솔 출력 (요청/초, 실패 수, 평균 응답시간)
- 장애 주입 직전/직후 Grafana 스크린샷 (CPU/Network)
- 복구 후 정상화 스크린샷

## 다음 단계: Phase 6-2 예고

Phase 6-2에서는 다음 내용을 다룰 예정이다:

- Prometheus Alert Rule 설정 (High CPU, Nginx 다운, HTTP 다운 blackbox 검사)
- Alertmanager Receiver 설정 (이메일 또는 웹 UI 확인)
- 장애 주입 시 알람 FIRING/RESOLVED 흐름 검증 및 캡처 수집
